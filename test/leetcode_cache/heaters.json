{
  "questionId": "475",
  "questionFrontendId": "475",
  "title": "Heaters",
  "content": "<p>Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.</p>\n\n<p>Every house can be warmed, as long as the house is within the heater&#39;s warm radius range.&nbsp;</p>\n\n<p>Given the positions of <code>houses</code> and <code>heaters</code> on a horizontal line, return <em>the minimum radius standard of heaters&nbsp;so that those heaters could cover all houses.</em></p>\n\n<p><strong>Notice</strong> that&nbsp;all the <code>heaters</code> follow your radius standard, and the warm radius will the same.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> houses = [1,2,3], heaters = [2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> houses = [1,2,3,4], heaters = [1,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> houses = [1,5], heaters = [2]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= houses.length, heaters.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= houses[i], heaters[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
  "difficulty": "Medium",
  "exampleTestcases": "[1,2,3]\n[2]\n[1,2,3,4]\n[1,4]\n[1,5]\n[2]",
  "exampleTestcaseList": [
    "[1,2,3]\n[2]",
    "[1,2,3,4]\n[1,4]",
    "[1,5]\n[2]"
  ],
  "sampleTestCase": "[1,2,3]\n[2]",
  "metaData": "{\r\n  \"name\": \"findRadius\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"houses\",\r\n      \"type\": \"integer[]\"\r\n  \r\n    }, \r\n    {\r\n            \"name\": \"heaters\",\r\n            \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "codeSnippets": [
    {
      "lang": "C++",
      "langSlug": "cpp",
      "code": "class Solution {\npublic:\n    int findRadius(vector<int>& houses, vector<int>& heaters) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "langSlug": "java",
      "code": "class Solution {\n    public int findRadius(int[] houses, int[] heaters) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "langSlug": "python",
      "code": "class Solution(object):\n    def findRadius(self, houses, heaters):\n        \"\"\"\n        :type houses: List[int]\n        :type heaters: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "langSlug": "python3",
      "code": "class Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "langSlug": "c",
      "code": "int findRadius(int* houses, int housesSize, int* heaters, int heatersSize) {\n    \n}"
    },
    {
      "lang": "C#",
      "langSlug": "csharp",
      "code": "public class Solution {\n    public int FindRadius(int[] houses, int[] heaters) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "langSlug": "javascript",
      "code": "/**\n * @param {number[]} houses\n * @param {number[]} heaters\n * @return {number}\n */\nvar findRadius = function(houses, heaters) {\n    \n};"
    },
    {
      "lang": "TypeScript",
      "langSlug": "typescript",
      "code": "function findRadius(houses: number[], heaters: number[]): number {\n    \n};"
    },
    {
      "lang": "PHP",
      "langSlug": "php",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $houses\n     * @param Integer[] $heaters\n     * @return Integer\n     */\n    function findRadius($houses, $heaters) {\n        \n    }\n}"
    },
    {
      "lang": "Swift",
      "langSlug": "swift",
      "code": "class Solution {\n    func findRadius(_ houses: [Int], _ heaters: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "langSlug": "kotlin",
      "code": "class Solution {\n    fun findRadius(houses: IntArray, heaters: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Dart",
      "langSlug": "dart",
      "code": "class Solution {\n  int findRadius(List<int> houses, List<int> heaters) {\n    \n  }\n}"
    },
    {
      "lang": "Go",
      "langSlug": "golang",
      "code": "func findRadius(houses []int, heaters []int) int {\n    \n}"
    },
    {
      "lang": "Ruby",
      "langSlug": "ruby",
      "code": "# @param {Integer[]} houses\n# @param {Integer[]} heaters\n# @return {Integer}\ndef find_radius(houses, heaters)\n    \nend"
    },
    {
      "lang": "Scala",
      "langSlug": "scala",
      "code": "object Solution {\n    def findRadius(houses: Array[Int], heaters: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "langSlug": "rust",
      "code": "impl Solution {\n    pub fn find_radius(houses: Vec<i32>, heaters: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "Racket",
      "langSlug": "racket",
      "code": "(define/contract (find-radius houses heaters)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"
    },
    {
      "lang": "Erlang",
      "langSlug": "erlang",
      "code": "-spec find_radius(Houses :: [integer()], Heaters :: [integer()]) -> integer().\nfind_radius(Houses, Heaters) ->\n  ."
    },
    {
      "lang": "Elixir",
      "langSlug": "elixir",
      "code": "defmodule Solution do\n  @spec find_radius(houses :: [integer], heaters :: [integer]) :: integer\n  def find_radius(houses, heaters) do\n    \n  end\nend"
    }
  ],
  "hints": []
}