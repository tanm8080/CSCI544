{
  "questionId": "915",
  "questionFrontendId": "478",
  "title": "Generate Random Point in a Circle",
  "content": "<p>Given the radius and the position of the center of a circle, implement the function <code>randPoint</code> which generates a uniform random point inside the circle.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(double radius, double x_center, double y_center)</code> initializes the object with the radius of the circle <code>radius</code> and the position of the center <code>(x_center, y_center)</code>.</li>\n\t<li><code>randPoint()</code> returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array <code>[x, y]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;randPoint&quot;, &quot;randPoint&quot;, &quot;randPoint&quot;]\n[[1.0, 0.0, 0.0], [], [], []]\n<strong>Output</strong>\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n\n<strong>Explanation</strong>\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;&nbsp;radius &lt;= 10<sup>8</sup></code></li>\n\t<li><code>-10<sup>7</sup> &lt;= x_center, y_center &lt;= 10<sup>7</sup></code></li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>randPoint</code>.</li>\n</ul>\n",
  "difficulty": "Medium",
  "exampleTestcases": "[\"Solution\",\"randPoint\",\"randPoint\",\"randPoint\"]\n[[1.0,0.0,0.0],[],[],[]]",
  "exampleTestcaseList": [
    "[\"Solution\",\"randPoint\",\"randPoint\",\"randPoint\"]\n[[1.0,0.0,0.0],[],[],[]]"
  ],
  "sampleTestCase": "[\"Solution\",\"randPoint\",\"randPoint\",\"randPoint\"]\n[[1.0,0.0,0.0],[],[],[]]",
  "metaData": "{\r\n    \"classname\": \"Solution\",\r\n    \"maxbytesperline\": 200000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"name\": \"radius\",\r\n                \"type\": \"double\"\r\n            },\r\n            {\r\n                \"name\": \"x_center\",\r\n                \"type\": \"double\"\r\n            },\r\n            {\r\n                \"name\": \"y_center\",\r\n                \"type\": \"double\"\r\n            }\r\n        ]\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"randPoint\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"double[]\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
  "codeSnippets": [
    {
      "lang": "C++",
      "langSlug": "cpp",
      "code": "class Solution {\npublic:\n    Solution(double radius, double x_center, double y_center) {\n        \n    }\n    \n    vector<double> randPoint() {\n        \n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(radius, x_center, y_center);\n * vector<double> param_1 = obj->randPoint();\n */"
    },
    {
      "lang": "Java",
      "langSlug": "java",
      "code": "class Solution {\n\n    public Solution(double radius, double x_center, double y_center) {\n        \n    }\n    \n    public double[] randPoint() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(radius, x_center, y_center);\n * double[] param_1 = obj.randPoint();\n */"
    },
    {
      "lang": "Python",
      "langSlug": "python",
      "code": "class Solution(object):\n\n    def __init__(self, radius, x_center, y_center):\n        \"\"\"\n        :type radius: float\n        :type x_center: float\n        :type y_center: float\n        \"\"\"\n        \n\n    def randPoint(self):\n        \"\"\"\n        :rtype: List[float]\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(radius, x_center, y_center)\n# param_1 = obj.randPoint()"
    },
    {
      "lang": "Python3",
      "langSlug": "python3",
      "code": "class Solution:\n\n    def __init__(self, radius: float, x_center: float, y_center: float):\n        \n\n    def randPoint(self) -> List[float]:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(radius, x_center, y_center)\n# param_1 = obj.randPoint()"
    },
    {
      "lang": "C",
      "langSlug": "c",
      "code": "\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(double radius, double x_center, double y_center) {\n    \n}\n\ndouble* solutionRandPoint(Solution* obj, int* retSize) {\n    \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(radius, x_center, y_center);\n * double* param_1 = solutionRandPoint(obj, retSize);\n \n * solutionFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "langSlug": "csharp",
      "code": "public class Solution {\n\n    public Solution(double radius, double x_center, double y_center) {\n        \n    }\n    \n    public double[] RandPoint() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(radius, x_center, y_center);\n * double[] param_1 = obj.RandPoint();\n */"
    },
    {
      "lang": "JavaScript",
      "langSlug": "javascript",
      "code": "/**\n * @param {number} radius\n * @param {number} x_center\n * @param {number} y_center\n */\nvar Solution = function(radius, x_center, y_center) {\n    \n};\n\n/**\n * @return {number[]}\n */\nSolution.prototype.randPoint = function() {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(radius, x_center, y_center)\n * var param_1 = obj.randPoint()\n */"
    },
    {
      "lang": "TypeScript",
      "langSlug": "typescript",
      "code": "class Solution {\n    constructor(radius: number, x_center: number, y_center: number) {\n        \n    }\n\n    randPoint(): number[] {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(radius, x_center, y_center)\n * var param_1 = obj.randPoint()\n */"
    },
    {
      "lang": "PHP",
      "langSlug": "php",
      "code": "class Solution {\n    /**\n     * @param Float $radius\n     * @param Float $x_center\n     * @param Float $y_center\n     */\n    function __construct($radius, $x_center, $y_center) {\n        \n    }\n  \n    /**\n     * @return Float[]\n     */\n    function randPoint() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($radius, $x_center, $y_center);\n * $ret_1 = $obj->randPoint();\n */"
    },
    {
      "lang": "Swift",
      "langSlug": "swift",
      "code": "\nclass Solution {\n\n    init(_ radius: Double, _ x_center: Double, _ y_center: Double) {\n        \n    }\n    \n    func randPoint() -> [Double] {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(radius, x_center, y_center)\n * let ret_1: [Double] = obj.randPoint()\n */"
    },
    {
      "lang": "Kotlin",
      "langSlug": "kotlin",
      "code": "class Solution(radius: Double, x_center: Double, y_center: Double) {\n\n    fun randPoint(): DoubleArray {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(radius, x_center, y_center)\n * var param_1 = obj.randPoint()\n */"
    },
    {
      "lang": "Dart",
      "langSlug": "dart",
      "code": "class Solution {\n\n  Solution(double radius, double x_center, double y_center) {\n    \n  }\n  \n  List<double> randPoint() {\n    \n  }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = Solution(radius, x_center, y_center);\n * List<double> param1 = obj.randPoint();\n */"
    },
    {
      "lang": "Go",
      "langSlug": "golang",
      "code": "type Solution struct {\n    \n}\n\n\nfunc Constructor(radius float64, x_center float64, y_center float64) Solution {\n    \n}\n\n\nfunc (this *Solution) RandPoint() []float64 {\n    \n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(radius, x_center, y_center);\n * param_1 := obj.RandPoint();\n */"
    },
    {
      "lang": "Ruby",
      "langSlug": "ruby",
      "code": "class Solution\n\n=begin\n    :type radius: Float\n    :type x_center: Float\n    :type y_center: Float\n=end\n    def initialize(radius, x_center, y_center)\n        \n    end\n\n\n=begin\n    :rtype: Float[]\n=end\n    def rand_point()\n        \n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(radius, x_center, y_center)\n# param_1 = obj.rand_point()"
    },
    {
      "lang": "Scala",
      "langSlug": "scala",
      "code": "class Solution(_radius: Double, _x_center: Double, _y_center: Double) {\n\n    def randPoint(): Array[Double] = {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * val obj = new Solution(radius, x_center, y_center)\n * val param_1 = obj.randPoint()\n */"
    },
    {
      "lang": "Rust",
      "langSlug": "rust",
      "code": "struct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(radius: f64, x_center: f64, y_center: f64) -> Self {\n        \n    }\n    \n    fn rand_point(&self) -> Vec<f64> {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(radius, x_center, y_center);\n * let ret_1: Vec<f64> = obj.rand_point();\n */"
    },
    {
      "lang": "Racket",
      "langSlug": "racket",
      "code": "(define solution%\n  (class object%\n    (super-new)\n    \n    ; radius : flonum?\n    ; x_center : flonum?\n    ; y_center : flonum?\n    (init-field\n      radius\n      x_center\n      y_center)\n    \n    ; rand-point : -> (listof flonum?)\n    (define/public (rand-point)\n      )))\n\n;; Your solution% object will be instantiated and called as such:\n;; (define obj (new solution% [radius radius] [x_center x_center] [y_center y_center]))\n;; (define param_1 (send obj rand-point))"
    },
    {
      "lang": "Erlang",
      "langSlug": "erlang",
      "code": "-spec solution_init_(Radius :: float(), X_center :: float(), Y_center :: float()) -> any().\nsolution_init_(Radius, X_center, Y_center) ->\n  .\n\n-spec solution_rand_point() -> [float()].\nsolution_rand_point() ->\n  .\n\n\n%% Your functions will be called as such:\n%% solution_init_(Radius, X_center, Y_center),\n%% Param_1 = solution_rand_point(),\n\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations."
    },
    {
      "lang": "Elixir",
      "langSlug": "elixir",
      "code": "defmodule Solution do\n  @spec init_(radius :: float, x_center :: float, y_center :: float) :: any\n  def init_(radius, x_center, y_center) do\n    \n  end\n\n  @spec rand_point() :: [float]\n  def rand_point() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Solution.init_(radius, x_center, y_center)\n# param_1 = Solution.rand_point()\n\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations."
    }
  ],
  "hints": []
}