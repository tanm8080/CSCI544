{
  "questionId": "166",
  "questionFrontendId": "166",
  "title": "Fraction to Recurring Decimal",
  "content": "<p>Given two integers representing the <code>numerator</code> and <code>denominator</code> of a fraction, return <em>the fraction in string format</em>.</p>\n\n<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>\n\n<p>If multiple answers are possible, return <strong>any of them</strong>.</p>\n\n<p>It is <strong>guaranteed</strong> that the length of the answer string is less than <code>10<sup>4</sup></code> for all the given inputs.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numerator = 1, denominator = 2\n<strong>Output:</strong> &quot;0.5&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numerator = 2, denominator = 1\n<strong>Output:</strong> &quot;2&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> numerator = 4, denominator = 333\n<strong>Output:</strong> &quot;0.(012)&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;=&nbsp;numerator, denominator &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>denominator != 0</code></li>\n</ul>\n",
  "difficulty": "Medium",
  "exampleTestcases": "1\n2\n2\n1\n4\n333",
  "exampleTestcaseList": [
    "1\n2",
    "2\n1",
    "4\n333"
  ],
  "sampleTestCase": "1\n2",
  "metaData": "{\n  \"name\": \"fractionToDecimal\",\n  \"params\": [\n    {\n      \"name\": \"numerator\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"denominator\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"string\"\n  }\n}",
  "codeSnippets": [
    {
      "lang": "C++",
      "langSlug": "cpp",
      "code": "class Solution {\npublic:\n    string fractionToDecimal(int numerator, int denominator) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "langSlug": "java",
      "code": "class Solution {\n    public String fractionToDecimal(int numerator, int denominator) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "langSlug": "python",
      "code": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "langSlug": "python3",
      "code": "class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        "
    },
    {
      "lang": "C",
      "langSlug": "c",
      "code": "char* fractionToDecimal(int numerator, int denominator) {\n    \n}"
    },
    {
      "lang": "C#",
      "langSlug": "csharp",
      "code": "public class Solution {\n    public string FractionToDecimal(int numerator, int denominator) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "langSlug": "javascript",
      "code": "/**\n * @param {number} numerator\n * @param {number} denominator\n * @return {string}\n */\nvar fractionToDecimal = function(numerator, denominator) {\n    \n};"
    },
    {
      "lang": "TypeScript",
      "langSlug": "typescript",
      "code": "function fractionToDecimal(numerator: number, denominator: number): string {\n    \n};"
    },
    {
      "lang": "PHP",
      "langSlug": "php",
      "code": "class Solution {\n\n    /**\n     * @param Integer $numerator\n     * @param Integer $denominator\n     * @return String\n     */\n    function fractionToDecimal($numerator, $denominator) {\n        \n    }\n}"
    },
    {
      "lang": "Swift",
      "langSlug": "swift",
      "code": "class Solution {\n    func fractionToDecimal(_ numerator: Int, _ denominator: Int) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "langSlug": "kotlin",
      "code": "class Solution {\n    fun fractionToDecimal(numerator: Int, denominator: Int): String {\n        \n    }\n}"
    },
    {
      "lang": "Dart",
      "langSlug": "dart",
      "code": "class Solution {\n  String fractionToDecimal(int numerator, int denominator) {\n    \n  }\n}"
    },
    {
      "lang": "Go",
      "langSlug": "golang",
      "code": "func fractionToDecimal(numerator int, denominator int) string {\n    \n}"
    },
    {
      "lang": "Ruby",
      "langSlug": "ruby",
      "code": "# @param {Integer} numerator\n# @param {Integer} denominator\n# @return {String}\ndef fraction_to_decimal(numerator, denominator)\n    \nend"
    },
    {
      "lang": "Scala",
      "langSlug": "scala",
      "code": "object Solution {\n    def fractionToDecimal(numerator: Int, denominator: Int): String = {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "langSlug": "rust",
      "code": "impl Solution {\n    pub fn fraction_to_decimal(numerator: i32, denominator: i32) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Racket",
      "langSlug": "racket",
      "code": "(define/contract (fraction-to-decimal numerator denominator)\n  (-> exact-integer? exact-integer? string?)\n  )"
    },
    {
      "lang": "Erlang",
      "langSlug": "erlang",
      "code": "-spec fraction_to_decimal(Numerator :: integer(), Denominator :: integer()) -> unicode:unicode_binary().\nfraction_to_decimal(Numerator, Denominator) ->\n  ."
    },
    {
      "lang": "Elixir",
      "langSlug": "elixir",
      "code": "defmodule Solution do\n  @spec fraction_to_decimal(numerator :: integer, denominator :: integer) :: String.t\n  def fraction_to_decimal(numerator, denominator) do\n    \n  end\nend"
    }
  ],
  "hints": [
    "No scary math, just apply elementary math knowledge. Still remember how to perform a <i>long division</i>?",
    "Try a long division on 4/9, the repeating part is obvious. Now try 4/333. Do you see a pattern?",
    "Notice that once the remainder starts repeating, so does the divided result.",
    "Be wary of edge cases! List out as many test cases as you can think of and test your code thoroughly."
  ]
}